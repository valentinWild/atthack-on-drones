<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtualGrasp</name>
    </assembly>
    <members>
        <member name="F:VirtualGrasp.VG_Bone.m_index">
            The index of this bone in the avatar structure
        </member>
        <member name="F:VirtualGrasp.VG_Bone.m_transform">
            The Unity transform that relates to this object
        </member>
        <member name="F:VirtualGrasp.VG_Bone.m_transformData">
            The VG transform data pointer that relates to this object
        </member>
        <member name="F:VirtualGrasp.VG_Bone.m_rigidBody">
            Potential RigidBody on the bone for physical avatar, if have rigidbody should  not have m_articulationBody
        </member>
        <member name="F:VirtualGrasp.VG_Bone.m_articulationBody">
            Potential ArticulationBody on the bone for physical avatar, if have articulationbody should not have m_rigidBody
        </member>
        <member name="F:VirtualGrasp.VG_Bone.m_sensorBody">
            Potential Rigidbody used to receive sensor controlled hand bone poses for physical avatar hand control
        </member>
        <member name="F:VirtualGrasp.VG_Bone.m_side">
            To which side of hand this bone belongs to, only assigned for physical avatar when creating collider now
        </member>
        <member name="M:VirtualGrasp.VG_HandBoneMap.ManualAssignBones(System.Int32,VirtualGrasp.VG_HandSide)">
            Manually assign hand bones into avatar handle
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_avatar">
            TODO: improve this nested structure
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_transforms">
            Holds the transforms of the rig to be communicated with the VirtualGrasp library.
        </member>
        <member name="P:VirtualGrasp.VG_AvatarHandle.m_avatarID">
            The avatar ID (should be unique, describing the identity of this avatar)
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_resetPoses">
            The reset poses when switching the controlled hands.
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_transformsHandle">
            A caching pointer for all the avatar transforms
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_IdxToId">
            A map of all bone indices (their position in the array) to their IDs (instance IDs).
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_bones">
            A map of all bone handles from the transformIDs to the VG_Bones.
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_bonesByBoneType">
            A map of all bone handles from a side and bone type to the corresponding VG_Bones.
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_bonesByFingerBonePair">
            A map of all bone handles from a side and bone type to the corresponding VG_Bones.
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_fingerBoneMass">
            Each finger bone's mass for articulation body, and wrist/palm is 3 times of finger bone
        </member>
        <member name="F:VirtualGrasp.VG_AvatarHandle.m_strength">
            Strength scale factor to articulation drive stiffness and force limit, [Range(0.1f, 10f)]
        </member>
        <member name="M:VirtualGrasp.VG_AvatarHandle.VerifyBoneTags(VirtualGrasp.VG_HandSide)">
            Verify filled bone tags in terms of hierarchical structure of wrist and finger bones, if not valid, will remove the side
        </member>
        <member name="M:VirtualGrasp.VG_AvatarHandle.FillBoneTagsFromHandProfile">
            Fill avatar handle's wrist and finger bone maps
        </member>
        <member name="M:VirtualGrasp.VG_AvatarHandle.SetHandBones">
            Send hand bones into VG core lib to prepare for hand analysis
        </member>
        <member name="M:VirtualGrasp.VG_AvatarHandle.SetupHandPhysicalArticulation">
            <summary>
            Setup hand using articulation body and connect with sensor body
            An alternative method for physical hand to SetupHandRigidBodies
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_AvatarHandle.SetupHandRigidBodies">
            <summary>
            Setup hand as rigid bodies, not connected with joint now, and connect with sensor body
            An alternative method for physical hand to SetupHandPhysicalArticulation
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_AvatarHandle.CreateColliders">
            Create hand colliders from VG
        </member>
        <member name="F:VirtualGrasp.VG_ColliderManager.m_objectGrabJoints">
            Map from the grasped game object to the grab joint
        </member>
        <member name="T:VirtualGrasp.VG_SelectionSettings">
            VG_SelectionSettings can be used to initialize the object and grasp selection settings.
        </member>
        <member name="T:VirtualGrasp.VG_DebugSettings">
            VG_DebugSettings can be used to configure some debug options.
        </member>
        <member name="T:VirtualGrasp.VG_GraspInteractionSettings">
            VG_GlobalGraspInteractionSettings is ued to configure global parameters of VirtualGrasp grasp interaction.
            @img
        </member>
        <member name="T:VirtualGrasp.VG_SensorSetup">
            VG_SensorSetup is part of the VG_SensorConfiguration component and is used to 
            set hand- and sensor-specific settings.
            @img
        </member>
        <member name="T:VirtualGrasp.VG_ArticulationBase">
            VG_ArticulationBase is an abstract class, so only inherited components (such as 
            VG_Articulation) can be attached to an object. An articulation can be attached to 
            an object that should follow an articulated constraint, such as a prismatic or revolute joint.
        </member>
        <member name="T:VirtualGrasp.VG_Articulation">
            VG_Articulation inherits from VG_ArticulationBase. An articulation can be attached to 
            an object that should follow an articulated constraint, such as a prismatic or revolute joint.
            The anchor describes the axis of the constraint (such as the axis of movement for prismatic joints
            like buttons or drawers; or the axis of rotation for revolute joints such as wheels or levers).
            The push direction describes the direction of push for pushable objects.
            @img
        </member>
        <member name="M:VirtualGrasp.VG_Articulation.SetPushDirection(UnityEngine.Vector3)">
            Given push axis in object coordinate frame, set VG_Articulation component's property m_relativePushAxis and m_pushDirection
        </member>
        <member name="T:VirtualGrasp.VG_Interactable">
            VG_Interactable allows to specify interaction parameters specifically for an object.
            An VG_Interactable can be attached to an object that should follow a different interaction
            behavior than defined in the global VG_GraspInteractionSettings.
            @img
        </member>
        <member name="T:VirtualGrasp.VG_ControllerProfile">
            VG_ControllerProfile is a helper class to define specific sensor / controller configuration.
        </member>
        <member name="T:VirtualGrasp.VG_HandProfile">
            VG_HandProfile is a helper class to define specific hand profile to align hand model standards.
        </member>
        <member name="T:VirtualGrasp.VG_QueryGraspMethod">
            The query grasp method for GetGrasp() function
        </member>
        <member name="T:VirtualGrasp.VG_SensorControlFlags">
            Enum flag to describe what controller signals a sensor should cover.
        </member>
        <member name="T:VirtualGrasp.VG_InteractionMode">
            Enum that defines at what state the hand is in and you can access a specific hand's mode through its VG_HandStatus.
        </member>
        <member name="T:VirtualGrasp.VG_ReturnCode">
            ReturnCode for various VirtualGrasp functions. 
            Most functions in this API provide such a return code.
        </member>
        <member name="T:VirtualGrasp.ReturnCodeInternal">
            Internal return code (native library to wrapper)
        </member>
        <member name="T:VirtualGrasp.VG_EditorAction">
            Action towards the grasp editor, see EditGrasp()
        </member>
        <member name="T:VirtualGrasp.VG_VrButton">
            Enum for setting which (VR) controller buttons.
        </member>
        <member name="T:VirtualGrasp.VG_NetworkSignal">
            Enum bitmask to compose parts of a NetworkSignal 
        </member>
        <member name="T:VirtualGrasp.MatrixType">
            MatrixType is a helper class to define specific matrix properties that are important to describe a 4x4 matrix.
        </member>
        <member name="M:VirtualGrasp.MatrixType.IsRightHand(System.Int32)">
            Tell if a matrix type is right-handed.
            @param matrix_type The bit-field integer to check if right-hand flag (MATRIX_RHS) is set.
            @return TRUE if the matrix_type's right-hand flag (MATRIX_RHS) is set.
        </member>
        <member name="M:VirtualGrasp.MatrixType.IsRowMajor(System.Int32)">
            Tell if a matrix type is row-major.
            @param matrix_type The bit-field integer to check if row-major flag (MATRIX_ROWMAJ) is set.
            @return TRUE if the matrix_type's row-major flag (MATRIX_ROWMAJ) is set.
        </member>
        <member name="F:VirtualGrasp.MatrixType.MATRIX_LHS">
            Flag for left-handed matrix type
        </member>
        <member name="F:VirtualGrasp.MatrixType.MATRIX_RHS">
            Flag for right-handed matrix type
        </member>
        <member name="F:VirtualGrasp.MatrixType.MATRIX_COLMAJ">
            Flag for column-major matrix type
        </member>
        <member name="F:VirtualGrasp.MatrixType.MATRIX_ROWMAJ">
            Flag for row-major matrix type
        </member>
        <member name="T:VirtualGrasp.VG_HandStatus">
            VG_HandStatus is used as a helping data structure in which the most important grasp state 
            of a hand is stored. Its use in the FixedUpdate() function of the MyVirtualGrasp.cs template
            will provide you with a good example on how to use the VG_HandStatus from the VirtualGrasp plugin.
        </member>
        <member name="T:VirtualGrasp.VG_HandSide">
            We support two hands per avatar, left and right in this enum.
        </member>
        <member name="T:VirtualGrasp.VG_AvatarInputType">
            Need to know what type made the avatar registration for scaling.
        </member>
        <member name="T:VirtualGrasp.VG_UrdfType">
            Avatar's hand template type represented as URDF.
        </member>
        <member name="T:VirtualGrasp.VG_SensorType">
            Different sensor (or controller) types that can be used by VirtualGrasp. Note only External Controller is supported.
        </member>
        <member name="T:VirtualGrasp.VG_GraspType">
            Animation grasp type enum.
        </member>
        <member name="T:VirtualGrasp.VG_GestureType">
            A humanoid hand gesture type enum.
        </member>
        <member name="T:VirtualGrasp.VG_FingerControlType">
            An enum to describe how fingers are controlled.
        </member>
        <member name="T:VirtualGrasp.VG_BoneType">
            An enum to describe a bone type, used for accessing of bones from outside the library.
        </member>
        <member name="T:VirtualGrasp.VG_JointType">
            Different articulated joint types supported by VG.
        </member>
        <member name="T:VirtualGrasp.VG_MotionType">
            Whether the motion is free or limited
        </member>
        <member name="T:VirtualGrasp.VG_PhysicalBy">
            An enum to specify if an object is physical, and if physical by which unity component.
        </member>
        <member name="T:VirtualGrasp.VG_GraspLabel">
            For labeling grasps (grasp editor functionality).
        </member>
        <member name="T:VirtualGrasp.VG_InteractionType">
            An enum to describe a hand interaction type (i.e. a mode on grasp visualization).
        </member>
        <member name="T:VirtualGrasp.VG_QueryGraspMode">
            Decide when query grasp if hand moves and how to move hand.
        </member>
        <member name="T:VirtualGrasp.VG_GraspSelectionMethod">
            An enum to specify which kind of method is used for pose-based grasp selection.
        </member>
        <member name="T:VirtualGrasp.VG_SynthesisMethod">
            Identifier for a grasp synthesis algorithm.
        </member>
        <member name="T:VirtualGrasp.VG_GraspConstraintType">
            Specify for an object how to constrain grasp synthesis.
        </member>
        <member name="T:VirtualGrasp.VG_QueryObjectTransformMode">
            Decide when query object transform which objects to get.
        </member>
        <member name="T:VirtualGrasp.VG_IReturnCode">
            Return code for core API functions.
        </member>
        <member name="T:VirtualGrasp.VG_PhysicalProperty">
            Contains initial physical object's property from rigidbody or articulation body.
        </member>
        <member name="T:VirtualGrasp.VG_Object">
            A VG_Object is the main container for any interactable object.
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_transform">
            The Unity transform that relates to this object
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_transformData">
            The VG transform data pointer that relates to this object
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_hash">
            The hash value of this object mesh (computed by VG)
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_rigidbody">
            The rigid body that relates to this object.
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_articulationbody">
            The articulated body that relates to this object.
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_isPhysicalBy">
            If this object is physical or not (can change during runtime).
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_isRootArticulationBody">
            If this object's articulation body is a root
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_physicalPropertyCacheForJointChange">
            Cache object's physical property in DestroyObjectPhysicalProperty() when switch object to nonphysical to change to constrained VG articulation
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_physicalPropertyCacheForGrabbing">
            Cache object's interpolation and use gravity in ConnectObject() when grabbing and recover when release physical object
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_VGArticulationCache">
            Cache object's initial VG Articulation component
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_VGArticulationPropertyCache">
            Cache object's initial VG Articulation property
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_changeArticulationBy">
            Specify object joint change status
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_hands">
            List of hands that are currently holding the object, should consistent with core lib's object_controller.m_directActiveHands
        </member>
        <member name="F:VirtualGrasp.VG_Object.m_indirectHands">
            List of hands that indirectly holding the object as an upstream movable object, note only valid for upstream movable object when is not directly grasped by hand.
        </member>
        <member name="T:VirtualGrasp.VG_ObjectHandler">
            Object handler is a class that contains all functionality related to
            object handling and management. The PrivateController has one m_objectHandler.
        </member>
        <member name="T:VirtualGrasp.VG_ObjectHandler.ObjectProcessError">
            A container for an error that can occur during object mesh processing (RegisterObjectMesh).
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.ObjectProcessError.m_error">
            The error code
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.ObjectProcessError.m_object">
            The object this error relates to
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.ObjectProcessError.m_message">
            A message assigned to the error
        </member>
        <member name="T:VirtualGrasp.VG_ObjectHandler.VG_TransformDataListContainer">
            A container for containing an array of transform data that can be re-used at fixed length
            instead of being allocated during runtime.
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.VG_TransformDataListContainer.MAX_NUM_OBJECTS">
            The fixed array size
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.VG_TransformDataListContainer.data">
            An array for data allocation
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.VG_TransformDataListContainer.vgTransformDataList">
            A helper handle to that array.
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_objects">
            A map to manage the object handles, keyed by their game object IDs.
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_objectIDs">
            We need this list to keep the order of transforms for hierarchical operations 
            (since the dictionary above does not assure order)
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_unbakedObjects">
            A map to manage unbaked objects, mainly for debug visualization, mapping what has been gone wrong.         
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_objectContainer">
            Helper class to manage object handles that are returned from VG core lib.
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_inHandRangeObjectIds">
            An object which is in range and also moving, will exist only in m_inHandRangeObjectIds (updated every frame)
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_hiddenObjectIds">
            List of hidden object IDs (updated every frame)
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_movingObjectIds">
            List of moving object IDs (updated every frame)
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_sentObjectIds">
            A objects have already been sent to VG (updated every frame)
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_saveDebugFiles">
            Flag if debug files shall be exported.
        </member>
        <member name="F:VirtualGrasp.VG_ObjectHandler.m_updateLocalPosesInSecondStep">
            Flag if we first update global poses and then update local for all the hierarchy of objects (true will switch update to not follow order)
        </member>
        <member name="M:VirtualGrasp.VG_ObjectHandler.GetSelectedVgObject(System.Int32,VirtualGrasp.VG_HandSide)">
            Get selected object for grasp or for push interactions
        </member>
        <member name="M:VirtualGrasp.VG_ObjectHandler.GetUpstreamMovableVgObject(System.Int32,VirtualGrasp.VG_HandSide)">
            Get upstream movable vg object
        </member>
        <member name="M:VirtualGrasp.VG_ObjectHandler.GetUpstreamMovableVgObject(System.Int32)">
            Get upstream movable vg object associated with input object
        </member>
        <member name="T:VirtualGrasp.ObjectProcessor">
             The ObjectProcessor is a helper class to prepare and send object mesh data for being
             processed to the library. Different child classes send meshes for different purposes,
             mainly differing in the override of the Run() function.
        </member>
        <member name="F:VirtualGrasp.ObjectProcessor.isValid">
            If the content of the processor is valid
        </member>
        <member name="F:VirtualGrasp.ObjectProcessor.m_hash">
            The hash of the object
        </member>
        <member name="F:VirtualGrasp.ObjectProcessor.m_returnCode">
            A return code of the result of the processor
        </member>
        <member name="F:VirtualGrasp.ObjectProcessor.object_transform">
            The transform data of the object
        </member>
        <member name="F:VirtualGrasp.ObjectProcessor.object_triangles">
            A handle to the object triangles
        </member>
        <member name="F:VirtualGrasp.ObjectProcessor.object_vertices">
            A handle to the object vertices
        </member>
        <member name="T:VirtualGrasp.ObjectProcessorForHashing">
            The ObjectProcessorForHashing sends mesh data to the VG library to compute the object hash.
        </member>
        <member name="T:VirtualGrasp.ObjectProcessorForExporting">
            The ObjectProcessorForExporting sends mesh data to the VG library to export an .obj file.
        </member>
        <member name="T:VirtualGrasp.ObjectProcessorForFallback">
            The ObjectProcessorForFallback sends mesh data to the VG library to compute a single bounding box as fallback for unbaked objects.
        </member>
        <member name="T:VirtualGrasp.HandleHelper`1">
            A class that provides a handle / pointer to a templated array so it can be used as argument for a library call.
        </member>
        <member name="T:VirtualGrasp.SelectionInterface.GraspRequest">
            Enum of different grasp request functions that can be called inside the library
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_hands">
            A list of the VG_HandStatus
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_avatars">
            A map to manage the avatar handles, keyed by their instance IDs.
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_controlledAvatars">
            A list of the avatar handles that are controlled by sensor
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_objectHandler">
            The object handler takes care of all objects
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_debugSettings">
            Debug settings
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_colliderManager">
            Collider manager
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_dbLoadState">
            Flag to store if grasp DB could be loaded.
        </member>
        <member name="F:VirtualGrasp.SelectionInterface.m_paused">
            Flag to pause VG
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.Clear">
            Clear the SelectionInterface from all pre-registered data.
            Can be used in case of a restart of the game.
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.Get">
            Check if this SelectionInterface is initialized (and return a pointer to it).
            @return Pointer to this instance if initialized, NULL otherwise.
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.Connect">
            Connect this SelectionInterface, i.e. initialize the DLL library, 
            and configure dependent on a configuration file.
            @return A string containing information about the initialization stage.
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.InitializeHands(VirtualGrasp.VG_AvatarHandle)">
            Initialize the VG_HandStatus with data from the plugin.
            @param avatarHandle The avatar handle.
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.StopRecording(System.String)">
            Stop recording sensor signal and store to a file
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.LoadRecording(System.String)">
            Load recorded sensor signal from a file, but do not start replay
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.LoadRecording(VirtualGrasp.VG_Recording)">
            Load recorded sensor signal from a file, but do not start replay
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.StartReplay(System.Int32,UnityEngine.Transform)">
            Start replay all interactions on all hands in recorded SensorDB
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.ResumeReplay(System.Int32)">
            Resume replay for the given avatar
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.StopReplay(System.Int32)">
            Stop replay all interactions on all hands in recorded SensorDB
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.StartReplayOnObject(System.Int32,VirtualGrasp.VG_HandSide,System.Int32,System.Int32)">
            Start replay an interaction on one object on this hand side
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.UpdateHandStatus">
            Update the VG_HandStatus with data from the plugin.
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.ChangeObjectJoint(UnityEngine.Transform,System.Int32,VirtualGrasp.VG_JointType,VirtualGrasp.VG_MotionType,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Int32,UnityEngine.Vector3,System.Boolean,System.Single,System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single},UnityEngine.Vector3,UnityEngine.Quaternion)">
            For multiplayer sync networked joint config with VG internal object joint for player without state authority on this object
        </member>
        <member name="M:VirtualGrasp.SelectionInterface.Release">
            Release this SelectionInterface, i.e. mainly wait for closing threads, and
            decouple the connected libraries.
        </member>
        <member name="T:VirtualGrasp.Interface">
            This is the base class for each VirtualGraspInterface.
        </member>
        <member name="F:VirtualGrasp.Interface.m_registeredControllers">
            A map to manage the controller setups, keyed by the avatar IDs they refer to.
        </member>
        <member name="F:VirtualGrasp.Interface.m_state">
            The current status of the interface.
        </member>
        <member name="F:VirtualGrasp.Interface.hSupplementaryDLLs">
            Managing potential native dependency libraries, key: library name; value: native library handle.
        </member>
        <member name="F:VirtualGrasp.Interface.m_controllers">
            A map to manage the external controllers, keyed by the wrist IDs they refer to.
        </member>
        <member name="M:VirtualGrasp.Interface.RegisterRig(VirtualGrasp.VG_AvatarHandle,VirtualGrasp.VG_SensorSetup,VirtualGrasp.VG_SensorSetup)">
            Register a rig.
        </member>
        <member name="T:VirtualGrasp.VG_Controller">
            <summary>
            This is the VirtualGrasp main controller and the public API to be used in 
            Unity scripts after importing the plugin into the Unity scene.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.m_selectionInterface">
            The selection interface initialized towards the VirtualGrasp selection library.
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnInitialize">
            <summary>
            The event to call when we have successfully initialized the library.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectGrasped">
            <summary>
            This event is invoked in the frame when a hand has fully grasped an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectReleased">
            <summary>
            This event is invoked in the frame when a hand is starting to release an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectFullyReleased">
            <summary>
            This event is invoked in the frame when an object is fully release by all hands.
            The HandStatus it carries is the last hand that releases the object.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectPushed">
            <summary>
            This event is invoked in the frame when a hand pushing an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectPushStopped">
            <summary>
            This event is invoked in the frame when a hand releases push on an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectSelected">
            <summary>
            This event is invoked in the frame when a hand is starting to select an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
            @tag VG_Highlighter
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectDeselected">
            <summary>
            This event is invoked in the frame when a hand is starting to deselect an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
            @tag VG_Highlighter
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnHandEmptied">
            <summary>
            This event is invoked in the frame when a hand is switching from a non-empty mode to EMPTY mode.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnHandNonEmptied">
            <summary>
            This event is invoked in the frame when a hand is switching from EMPTY mode to a non-empty mode.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnUpstreamMovableObjectFullyReleased">
            <summary>
            This event is invoked in the frame when an upstream movable object is fully release by all hands.
            The Transform it carries includes the object that has just been released.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnUpstreamMovableObjectFullyReleasedByHand">
            <summary>
            This event is invoked in the frame when an upstream movable object is fully release by all hands.
            The HandStatus it carries is the last hand that released the upstream object
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnUpstreamMovableObjectChanged">
            <summary>
            This event is invoked in the frame when an upstream movable object is changed.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnUpstreamMovableObjectRemoved">
            <summary>
            This event is invoked in the frame when an upstream movable object is removed.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnGraspTriggered">
            <summary>
            This event is invoked in the frame when a hand is starting to grasp an object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectEnter2HandMode">
            <summary>
            This event is invoked in the frame when object is grasped by 2nd hand.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
            @tag VG_Highlighter
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectExit2HandMode">
            <summary>
            This event is invoked in the frame when object is released by the 2nd grasping hand.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectCollided">
            <summary>
            This event is invoked when a grasped object is colliding with another object.
            The VG_HandStatus it carries includes more information about the interaction.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectJointChangedOnJointConfig">
            <summary>
            This event is invoked when an object's articulation / joint is changed.
            The VG_ObjectJointConfig carries the new joint configuration after joint change.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectJointChanged">
            <summary>
            This event is invoked when an object's articulation / joint is changed.
            The VG_Articulation it carries includes more information about the joint.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectInternalJointChanged">
            <summary>
            This event is invoked when an object's joint is changed internally, but there is no VG_Articulation on object.
            The Transform carries which object changed the joint internally.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnObjectSelectionWeightChanged">
            <summary>
            This event is invoked when an object's selection weight is changed.
            The event carries the object for which the weight has been changed and the new weight.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnAvatarSpecificObjectSelectionWeightChanged">
            <summary>
            This event is invoked when an avatar-specific object selection weight is changed.
            The event carries the object and avatarID for which the weight has been changed and the new weight.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnPreUpdate">
            <summary>
            This event is invoked in the update loop before VG runs its update.
            Thus, all other scripts that should update before the VG cycle should listen to this event.
            </summary>
        </member>
        <member name="F:VirtualGrasp.VG_Controller.OnPostUpdate">
            <summary>
            This event is invoked in the update loop after VG runs its update.
            Thus, all other scripts that should update after the VG cycle should listen to this event.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.Initialize">
            <summary>
            Initialize the plugin.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsEnabled">
            <summary>
            Check if the plugin has been initialized and is ready to use.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.FixedUpdate">
            <summary>
            The FixedUpdate() heartbeat of the plugin.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsolatedUpdateDataIn">
            <summary>
            The FixedUpdate() method has been divided into three parts: IsolatedUpdateDataIn(), IsolatedUpdate() and IsolatedUpdateDataOut()
            for application of the Burst compiler. IsolatedUpdateDataIn() isolates data communication from Unity to VG.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsolatedUpdate">
            <summary>
            The Update() method has been divided into three parts: IsolatedUpdateDataIn(), IsolatedUpdate() and IsolatedUpdateDataOut()
            for application of the Burst compiler. IsolatedUpdate() runs the main update loop in VG.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsolatedUpdateDataOut">
            <summary>
            The Update() method has been divided into three parts: IsolatedUpdateDataIn(), IsolatedUpdate() and IsolatedUpdateDataOut()
            for application of the Burst compiler. IsolatedUpdateDataOut() isolates data communication from VG to Unity.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetHands">
            <summary>
            Receive an enumerator of all registered hands and their status.
            </summary>
            <returns>Enumerator over VG_HandStatus.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetHand(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Receive a specific hand and its status.
            </summary>
            <param name="avatarID">The avatar to get the hand status for.</param> 
            <param name="side">The hand side to get the avatar from.</param> 
            <returns>A VG_HandStatus.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetHand(UnityEngine.Transform)">
            <summary>
            Receive a specific hand and its status.
            </summary>
            <param name="wrist">The wrist transform corresponding to the queried hand status.</param> 
            <returns>A VG_HandStatus.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetAvatarID(UnityEngine.SkinnedMeshRenderer,System.Int32@)">
            <summary>
            Get the AvatarID of the given skinned mesh renderer
            </summary>
            <param name="avatarID">The returned AvatarID.</param>
            <returns>VG_ReturnCode.SUCCESS on successful avatar id fetch, or VG_ReturnCode.INVALID_AVATAR if avatar is null.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetSensorControlledAvatarID(System.Int32@)">
            <summary>
            Get the AvatarID of the sensor controlled avatar when the avatar represents both left and right hands.
            </summary>
            <param name="avatarID">The returned AvatarID. Will be set to -1 upon error.</param>
            <returns>VG_ReturnCode.SUCCESS on successful avatar id fetch, or VG_ReturnCode.DLL_FUNCTION_FAILED on an unexpected error.</returns>
            @remark No guarantee on returning the one that was first sensor controlled avatar
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetSensorControlledAvatarID(System.Int32@,System.Int32@)">
            <summary>
            Get the AvatarID(s) of the sensor controlled avatar(s) when each avatar represents both hand sides or just one hand side. If the avatar represents both hand
            sides then avatarIDLeft and avatarIDRight are identical.
            </summary>
            <param name="avatarIDLeft">The ID of sensor avatar that include left hand. Will be set to -1 upon error or if there is no sensor avatar representing left hand.</param>
            <param name="avatarIDRight">The ID of sensor avatar that include right hand. Will be set to -1 upon error or if there is no sensor avatar representing right hand.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetRecordingStatesOnAvatar(System.Int32,System.Boolean)">
            <summary>
            Set if use the avatar for recording response states during sensor recording or replay.
            </summary>
            <param name="avatarID">The avatar id.</param>
            <param name="recordingStates">If use this avatar to record response states in sensor db.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark When recordingStates is true, if avatar is used for sensor recording, then recording will also include response states,
            while if avatar is used for replay sensor db, then replay will update response states in the sensor db. 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterValidationAvatar(UnityEngine.SkinnedMeshRenderer,System.Int32@,VirtualGrasp.VG_HandProfile)">
            <summary>
            Register a new validation avatar during runtime.
            </summary>
            <param name="avatar">The skinned mesh renderer of the model that should be registered to VG.</param>
            <param name="id">The new avatar ID will be assigned to this value after registration; -1 if it failed.</param>
            <param name="handProfile">Optional, provide the hand profile for this avatar registration.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterReplayAvatar(UnityEngine.SkinnedMeshRenderer,System.Int32@,VirtualGrasp.VG_HandProfile)">
            <summary>
            Register a new avatar during runtime.
            </summary>
            <param name="avatar">The skinned mesh renderer of the model that should be registered to VG.</param>
            <param name="id">The new avatar ID will be assigned to this value after registration; -1 if it failed.</param>
            <param name="handProfile">Optional, provide the hand profile for this avatar registration.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterRemoteAvatar(UnityEngine.SkinnedMeshRenderer,System.Int32@,VirtualGrasp.VG_HandProfile)">
            <summary>
            Register a new remote avatar during runtime.
            </summary>
            <param name="avatar">The skinned mesh renderer of the model that should be registered to VG.</param>
            <param name="id">The new avatar ID will be assigned to this value after registration; -1 if it failed.</param>
            <param name="handProfile">Optional, provide the hand profile for this avatar registration.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterSensorAvatar(UnityEngine.SkinnedMeshRenderer,System.Int32@,VirtualGrasp.VG_SensorSetup,VirtualGrasp.VG_HandProfile)">
            <summary>
            Register a new avatar during runtime. Single sensor controlling each hand.
            </summary>
            <param name="avatar">The skinned mesh renderer of the model that should be registered to VG.</param>
            <param name="id">The new avatar ID will be assigned to this value after registration; -1 if it failed.</param>
            <param name="primarySetup">The primary sensor setup used to control the avatar.</param>
            <param name="handProfile">Optional, provide the hand profile for this avatar registration.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterSensorAvatar(UnityEngine.SkinnedMeshRenderer,System.Int32@,VirtualGrasp.VG_SensorSetup,VirtualGrasp.VG_SensorSetup,VirtualGrasp.VG_HandProfile)">
            <summary>
            Register a new avatar during runtime. Double sensor for each hand.
            </summary>
            <param name="avatar">The skinned mesh renderer of the model that should be registered to VG.</param>
            <param name="id">The new avatar ID will be assigned to this value after registration; -1 if it failed.</param>
            <param name="primarySetup">The primary sensor setup used to control the avatar.</param>
            <param name="secondarySetup">The secondary sensor setup used to control the avatar.</param>
            <param name="handProfile">Optional, provide the hand profile for this avatar registration.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetAvatarMirrorHandControl(System.Int32,System.Boolean)">
            <summary>
            Set for a sensor avatar if has mirror hand control
            </summary>
            <param name="avatarID">The id of the avatar to be unregistered.</param>
            <param name="mirrorHand">Specify if sensor will control avatar hand of the opposite side.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.UnRegisterAvatar(System.Int32)">
            <summary>
            Unregister avatar during runtime.
            </summary>
            <param name="avatarID">The id of the avatar to be unregistered.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterObject(UnityEngine.Transform)">
            <summary>
            Sync a new object in the scene to the plugin, e.g. if the object is spawned.
            </summary>
            <param name="obj">The object that should be synced.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterObjects(System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Sync new objects from the scene to the plugin, e.g. if these object are newly spawned.
            </summary>
            <param name="objects">The objects that should be synced.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.DeleteDistalObject(UnityEngine.Transform)">
            <summary>
            Sync deleted objects from the scene to the plugin, e.g. if the object has been deleted.
            </summary>
            <param name="obj">The object that has been deleted.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Works only for distal objects.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.Clear">
            <summary>
            Reset the plugin.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.Release">
            <summary>
            Release the plugin.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SaveState(System.String)">
            <summary>
            Save the object hierarchy debug state. This is done automatically when closing VirtualGrasp.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetProxyHandStatusAtModeChange(UnityEngine.Transform,UnityEngine.Transform,System.Boolean,VirtualGrasp.VG_InteractionMode,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single[],UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,System.Single,System.Single)">
            <summary>
            Set (to VG) hand status when interaction mode changes
            </summary>
            <param name="wrist">The proxy wrist transform</param>
            <param name="selectedObject">The transform of the object that is grasped by this hand</param>
            <param name="isFirstGrabber">If the proxy wrist is first grabber on this object</param>
            <param name="mode">The interaction mode of this hand</param>
            <param name="graspPos">The grasp position relative to the object</param>
            <param name="graspRot">The grasp rotation relative to the object</param>
            <param name="fingerDofs">The finger dofs array for grasping</param>
            <param name="sensorPos">The sensor wrist position</param>
            <param name="sensorRot">The sensor wrist rotation</param>
            <param name="useGravity">If is first grabber, and upstream movable object has rigidbody or articulation body, set useGravity </param>
            <param name="jointState1">joint state of the object (state of single dof or along x-axis of planar joint) this hand is interacting with, </param>
            <param name="jointState2">secondary joint state of the object (state along y-axis of planar joint) this hand is interacting with </param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used for update hand status for proxy player  
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetPhysicalObjectUseGravity(UnityEngine.Transform,System.Boolean)">
            <summary>
            Set (to VG) if the physical object uses gravity before it is grasped.
            </summary>
            <param name="wrist">The proxy wrist transform</param>
            <param name="selectedObject">The transform of the object</param>
            <param name="useGravity">If the object uses gravity before it is grasped</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used for update object gravity use status across network  
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetProxyTriggerGraspSignal(UnityEngine.Transform,UnityEngine.Transform,System.Boolean,VirtualGrasp.VG_InteractionMode,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Set (to VG) trigger grasp signal when proxy hand grasp an object
            </summary>
            <param name="wrist">The proxy wrist transform</param>
            <param name="selectedObject">The transform of the object that is grasped by this hand</param>
            <param name="isFirstGrabber">If the proxy wrist is first grabber on this object</param>
            <param name="mode">The interaction mode of this hand</param>
            <param name="graspPos">The grasp position relative to the object</param>
            <param name="graspRot">The grasp rotation relative to the object</param>
            <param name="sensorPos">The sensor wrist position</param>
            <param name="sensorRot">The sensor wrist rotation</param>
            <param name="useGravity">If is first grabber, and upstream movable object has rigidbody or articulation body, set useGravity </param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used for receive trigger signal of proxy player who just grasp an object.  
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetProxyTriggerReleaseSignal(UnityEngine.Transform,UnityEngine.Transform,System.Single,System.Single,UnityEngine.Transform)">
            <summary>
            Set (to VG) trigger release signal when proxy hand release an object
            </summary>
            <param name="wrist">The proxy wrist transform</param>
            <param name="selectedObject">The object is to be released</param>
            <param name="jointState1">joint state of the object (state of single dof or along x-axis of planar joint) this hand is interacting with, </param>
            <param name="jointState2">secondary joint state of the object (state along y-axis of planar joint) this hand is interacting with </param>
            <param name="newFirstGrabber">Optional, the wrist transform of the new first grabber</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used for receive trigger signal of proxy player who just released an object.  
            @remark If return INVALID_FIRST_GRABBER meaning new first grabber hand is not grasping the object.
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetProxySensorSignal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Set (to VG) sensor pose of the proxy hand
            </summary>
            <param name="wrist">The proxy wrist transform</param>
            <param name="sensorPos">The sensor wrist position</param>
            <param name="sensorRot">The sensor wrist rotation</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used for the first grabber to receive sensor pose of proxy player's wrist to compute grasped object pose.  
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetFirstGrabber(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Set which hand is first grabber for a selected object
            </summary>
            <param name="selectedObject">The object on which first grabber is set</param>
            <param name="firstGrabberWrist">The first grabber wrist transform</param>
            <returns>VG_ReturnCode describing the error state of the function call</returns>
            @remark If return INVALID_FIRST_GRABBER meaning the hand is not grasping the object.
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFirstGrabber(UnityEngine.Transform,UnityEngine.Transform@,System.Boolean)">
            <summary>
            Query which hand is first grabber for a selected object
            </summary>
            <param name="selectedObject">The object on which first grabber is queried</param>
            <param name="firstGrabberWrist">The first grabber wrist transform</param>
            <param name="direct">Optional, if true will get directly grabbing hand</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFingerDofs(UnityEngine.Transform,System.Single[]@)">
            <summary>
            Get finger dofs array on a hand
            </summary>
            <param name="wrist">Wrist transform of the hand</param>
            <param name="fingerDofs">Output, finger dofs array</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used to sync finger pose across network 
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetFingerDofs(UnityEngine.Transform,System.Single[])">
            <summary>
            Set finger dofs on a hand
            </summary>
            <param name="wrist">Wrist transform of the hand</param>
            <param name="fingerDofs">Finger dofs array to be set</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used to sync finger pose across network 
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetHandsOnObject(UnityEngine.Transform,VirtualGrasp.VG_HandStatus[]@)">
            <summary>
            Get an array of direct active hands on a given objects, these hands are directly grasping or pushing on the object
            </summary>
            <param name="selectedObject">Object on which to query hands</param>
            <param name="hands">Output, direct active hands on this object</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used to render hands pose on objects linked to network transforms.
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetActiveHandsOnObject(UnityEngine.Transform,VirtualGrasp.VG_HandStatus[]@)">
            <summary>
            Get an array of active hands on a given objects, this hands can be directly or indirectly grasping or pushing on the object
            </summary>
            <param name="selectedObject">Object on which to query active hands</param>
            <param name="activeHands">Output, active hands on this object</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used to decide if sync an non-rigidbody object by teleporting when new player join.
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetRelativeObjectPose(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Get relative pose of selected object w.r.t root object
            </summary>
            <param name="rootObject">Object on which the relative pose is computed</param>
            <param name="selectedObject">Object on which to query the relative pose</param>
            <param name="relPos">Output, relative position of the selected object w.r.to root object</param>
            <param name="relRot">Output, relative rotation of the selected object w.r.to root object</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used to do client side prediction on selected object when it is descendent of the networked rigid body root object
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetLinkedObjects(UnityEngine.Transform,UnityEngine.Transform[]@)">
            <summary>
            Get the linked objects of a given selected object
            </summary>
            <param name="selectedObject">Object on which the linked objects are queried</param>
            <param name="linkedObjects">Output, list of linked objects including selectedObject</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Used to do client side prediction of all selected object's descendants when selectedObject is network rigidbody
            @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.JumpGraspObject(System.Int32,VirtualGrasp.VG_HandSide,UnityEngine.Transform)">
            <summary>
            Specify an object to be grasped by a hand no matter how far the object is.
            </summary>
            <param name="avatarID">The avatar id</param>
            <param name="handSide">The side of the hand</param>
            <param name="obj">The transform of the object that will be grasped by this hand</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Recommend to use "Jump Primary Grasp" interaction type on the object since otherwise dynamically generated grasp can be unnatural due to suboptimal hand placement.  
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SwitchGraspObject(System.Int32,VirtualGrasp.VG_HandSide,UnityEngine.Transform)">
            <summary>
            Instantaneously switch the grasped object to specified object in the function.
            </summary>
            <param name="avatarID">The avatar id</param>
            <param name="handSide">The side of the hand</param>
            <param name="obj">The transform of the object to switch to grasp</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Recommend to use "Jump Primary Grasp" interaction type on the object since otherwise dynamically generated grasp can be unnatural due to suboptimal hand placement.  
        </member>
        <member name="M:VirtualGrasp.VG_Controller.TogglePrimaryGraspOnObject(System.Int32,VirtualGrasp.VG_HandSide,UnityEngine.Transform)">
            <summary>
            Instantaneously switch the grasped object, and continuously calling also toggle through primary grasps on this object.
            </summary>
            <param name="avatarID">The avatar id</param>
            <param name="handSide">The side of the hand</param>
            <param name="obj">The transform of the object to switch to grasp and toggle primary grasps.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark The specified object should have JUMP_PRIMARY_GRASP interaction type and has added primary grasps in the grasp db.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetObjectSelectionWeight(UnityEngine.Transform,System.Single@)">
            <summary>
            Returns the object selection weight for grasping interaction.
            </summary>
            <param name="obj">Which object to specify weight</param>
            <param name="weight">The corresponding weight</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Note by default this weight is 1 for all objects.
            @remark Use case is mainly to specify relative selection preferences for cluttered objects.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetAvatarSpecificObjectSelectionWeight(System.Int32,UnityEngine.Transform,System.Single@)">
            <summary>
            Returns the avatar specific object selection weight of an object for interaction.
            </summary>
            <param name="avatarID">The avatar id</param>
            <param name="obj">Which object to specify weight</param>
            <param name="weight">The corresponding weight</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Note by default this weight is equal to the object's selection weight for all avatars.
            @remark Use case is mainly to specify relative selection preferences for cluttered objects.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetObjectSelectionWeight(UnityEngine.Transform,System.Single)">
            <summary>
            Specify the object selection weights for grasping interaction.
            </summary>
            <param name="obj">Which object to specify weight</param>
            <param name="weight">Should be >=0 value to specify the preferences to select this object. If 0 exclude this object in selection process</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Note by default this weight is 1 for all objects.
            @remark Use case is mainly to specify different grasp preferences for avatars e.g. master vs. student grasp abilities.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetAvatarSpecificObjectSelectionWeight(System.Int32,UnityEngine.Transform,System.Single)">
            <summary>
            Specify the avatar specific object selection weight of an object for interaction.
            </summary>
            <param name="avatarID">The avatar id</param>
            <param name="obj">Which object to specify weight</param>
            <param name="weight">Should be >=0 value to specify the preferences to select this object. If 0 exclude this object in selection process</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Note by default this weight is equal to the object's selection weight for all avatars.
            @remark Use case is mainly to specify different grasp preferences for avatars e.g. master vs. student grasp abilities.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ClearAvatarSpecificObjectSelectionWeights(System.Int32)">
            <summary>
            Clear all avatar specific object selection weights.
            </summary>
            <param name="avatarID">The avatar id</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGraspButton">
            <summary>
            Return the currently selected GraspButton.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetGraspButton(VirtualGrasp.VG_VrButton)">
            <summary>
            Set the currently selected GraspButton.
            </summary>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetObjectZeroPose(System.Int32,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean)">
            <summary>
            Receive the zero pose of the object or its joint anchor.
            </summary>
            <param name="objectID">The avatar to get the zero pose.</param>
            <param name="p">The returned position.</param>
            <param name="q">The returned rotation.</param>
            <param name="isJointAnchor">Set True (default) to get zero pose of object's joint center (anchor)s, and False to return the zero pose of object.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetSensorPose(System.Int32,VirtualGrasp.VG_HandSide,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Boolean)">
            <summary>
            Receive the sensor pose of a given avatar and hand.
            </summary>
            <param name="avatarID">The avatar to get the pose from.</param>
            <param name="handSide">The hand side to get the pose from.</param>
            <param name="p">The returned position.</param>
            <param name="q">The returned rotation.</param>
            <param name="absolute">Set True (default) to return the absolute pose, and False to return the relative pose.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetObjectJointState(UnityEngine.Transform,System.Single@)">
            <summary>
            Get the current joint state of a single-dof articulated object.
            For planar joint, the joint state along x-axis of the joint anchor.
            </summary>
            <param name="selectedObject">The object to get the current joint state value for.</param>
            <param name="jointState">The returned joint state. Will be set to 0.0f upon error</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            when selectedObject is null, or VG_ReturnCode.DLL_FUNCTION_FAILED on an unexpected error.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetObjectSecondaryJointState(UnityEngine.Transform,System.Single@)">
            <summary>
            Get the current secondary joint state along y-axis of joint anchor for planar articulated object.
            </summary>
            <param name="selectedObject">The object to get the current joint state value for.</param>
            <param name="secondaryJointState">The returned secondary joint state. Will be set to 0.0f upon error.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            when selectedObject is null, or VG_ReturnCode.DLL_FUNCTION_FAILED on an unexpected error.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetObjectJointState(UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Set the current joint to desired state for a single-dof articulated object or planar joint object.
            </summary>
            <param name="selectedObject">The object to set the joint state value for.</param>
            <param name="jointState">The target joint state. If exceed joint limit will be constrained within limit.</param>
            <param name="jointState2">The target secondary joint state for Planar joint. If exceed joint limit will be constrained within limit.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <remarks> After once this is called on object that are grasped by a hand, this will turn off hand control on the object pose.
            The hand control on this object will be allowed again when either release grasp on this object or call StopSettingObjectJointState()</remarks>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.StopSettingObjectJointState(UnityEngine.Transform)">
            <summary>
            Stop setting the current joint to desired state for a single-dof articulated object or planar joint object.
            </summary>
            <param name="selectedObject">The object to set the joint state value for.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <remarks> Should call this function to enable hand control on object pose after SetObjectJointState is finished. </remarks>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ChangeObjectJoint(UnityEngine.Transform,System.Int32,VirtualGrasp.VG_JointType,VirtualGrasp.VG_MotionType,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Int32,UnityEngine.Vector3,System.Boolean,System.Single,System.Collections.Generic.List{System.Single},System.Collections.Generic.List{System.Single},UnityEngine.Vector3,UnityEngine.Quaternion)">
            		* <summary>
            		 * Change a whole set of parameters of an object's joint in runtime for networked joint change
            		 * </summary>
            		 * <param name="selectedObject">The object to change the object joint parameters.</param>
            		 * <param name="parentID">The parent object id.</param>
            		 * <param name="jointType">The joint type.</param>
            		 * <param name="motionType">The motion type specifying if motion should be limited or free.</param>
            		 * <param name="anchorPosition">The anchor (joint center) position in object coordinate frame.</param>
            		 * <param name="anchorRotation">The anchor rotation in object coordinate frame.</param>
            		 * <param name="limit">The limit of the joint type. For planar joint this is the limit along xaxis of the anchor transform. </param>
            		 * <param name="screwRate">The screw rate (>=0, in cm per degree) for revolute joint.</param>
            		 * <param name="limit2">The limit along y-axis of the anchor transform for planar joint.</param>
            		 * <param name="affordance">The object affordance.</param>
            		 * <param name="pushAxis">The push axis in object coordinate frame.</param>
            		 * <param name="isDualHandsOnly">If the object can only be moved after more than one hands grasped it.</param>
            		 * <param name="simulatedWeight">What is simulated weight (kg).</param>
            		 * <param name="discreteStates">The discrete states for 1dof object or along x-axis of planar joint.</param>
            		 * <param name="discreteStates2">The discrete states along y-axis of the anchor transform for planar joint.</param>
            		 * <param name="zeroLocalPos">The zero local position of the object.</param>
            		 * <param name="zeroLocalRot">The zero local rotation of the object.</param>
            		 * <returns>VG_ReturnCode describing the error state of the function call.</returns>
            		 * @remark Should not be called on a Game Object that has [RequireComponent(typeof(Rigidbody))] attribute since VG needs to destroy Rigidbody when change to constrained joint type.
            		 * @tag VG_NetworkManager 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ChangeObjectJoint(UnityEngine.Transform,VirtualGrasp.VG_JointType,VirtualGrasp.VG_MotionType,UnityEngine.Transform,UnityEngine.Vector2,System.Single,UnityEngine.Vector2)">
            <summary>
            Change a set of parameters of an object's joint in runtime.
            </summary>
            <param name="selectedObject">The object to change the object joint parameters.</param>
            <param name="jointType">The new joint type.</param>
            <param name="motionType">The new motion type specifying if motion should be limited or free.</param>
            <param name="anchorTransform">The new anchor transform.</param>
            <param name="limit">The new limit of the new joint type. For planar joint this is the limit along xaxis of the anchor transform. </param>
            <param name="screwRate">The new screw rate (>=0, in cm per degree) for revolute joint.</param>
            <param name="limit2">The new limit along y-axis of the anchor transform for planar joint.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark If screwRate is set to 0 then rotating of revolute object will not move object position along the joint axis.
            @remark Recommend to use this in LateUpdate to guarantee object pose is in sync with VirtualGrasp library.
            @remark Should not be called on a Game Object that has [RequireComponent(typeof(Rigidbody))] attribute since VG needs to destroy Rigidbody when change to constrained joint type.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ChangeObjectJoint(UnityEngine.Transform,VirtualGrasp.VG_Articulation)">
            <summary>
            Change an object's joint and all other articulation parameters in runtime.
            </summary>
            <param name="selectedObject">The object to change the joint for.</param>
            <param name="articulation">An articulation describing the new articulation parameters.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Recommend to use this in LateUpdate to guarantee object pose is in sync with VirtualGrasp library.
            @remark Should not be called on a Game Object that has [RequireComponent(typeof(Rigidbody))] attribute since VG needs to destroy Rigidbody when change to constrained joint type.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetObjectJointType(UnityEngine.Transform,System.Boolean,VirtualGrasp.VG_JointType@)">
            <summary>
            Get object's original or current joint type.
            </summary>
            <param name="selectedObject">The object to get the current joint state value for.</param>
            <param name="original">If true, get the original joint type, otherwise the current type.</param>
            <param name="jointType">The returned joint type. Will be set to FLOATING upon error.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            when selectedObject is null, or VG_ReturnCode.DLL_FUNCTION_FAILED on an unexpected error.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RecoverObjectJoint(UnityEngine.Transform)">
            <summary>
            Recover an object's original joint, after it has been changed by ChangeObjectJoint().
            </summary>
            <param name="selectedObject">The object to recover the joint for.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark Recommend to use this in LateUpdate to guarantee object pose is in sync with VirtualGrasp library.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetDualHandsOnly(UnityEngine.Transform,System.Boolean)">
            <summary>
            Set if an object can only be manipulated by two or more hands from same or different avatars. 
            </summary>
            <param name="selectedObject">The object to change the dual hand type for.</param>
            <param name="dualHandsOnly">If dual hand only.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetSimulatedWeight(UnityEngine.Transform,System.Single)">
            <summary>
            Set simulated weight for an object (physical or not) to simulate heavy lifting effect when grasped. 
            </summary>
            <param name="selectedObject">The object to change the dual hand type for.</param>
            <param name="simulatedWeight">The weight (kg) that determines the "delayed" effect of heavy lifting. If 0 means no delay to pick up.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsLiftingObject(UnityEngine.Transform)">
            <summary>
            Check if an object with simulated weight is at the phase of "heavy lifting" 
            </summary>
            <param name="selectedObject">The object to check if is in lifting phase.</param>
            <returns>If the object is currently in lifting phase.</returns>
            @remark If true object is interpolating towards sensor controlled position.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetSelectableObjects(System.Boolean,System.Boolean)">
            <summary>
            Return all interactable objects.
            </summary>
            <param name="excludeHidden">If to exclude objects that have been hidden in the scene.</param>
            <param name="excludeUntagged">If to exclude objects that have been untagged in the scene.</param>
            <returns>All interactable objects in the scene.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetSelectableObjectsFromScene(System.Boolean,System.Boolean)">
            <summary>
            Return all interactable objects from the editor scene.
            </summary>
            <param name="excludeHidden">If to exclude objects that have been hidden in the scene.</param>
            <param name="excludeUntagged">If to exclude objects that have been untagged in the scene.</param>
            <returns>All interactable objects in the editor scene.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGraspingAvatars(UnityEngine.Transform,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,VirtualGrasp.VG_HandSide}}@)">
            <summary>
            Return the avatar/hand pairs that are currently grasping a specified object.
            </summary>
            <param name="objectToCheck">The object to be checked if it is currently grasped.</param>
            <param name="hands">An output list of avatar-hand-side-pairs describing which hands are currently grasping that object.</param>
            <returns>Number of hands grasping the object.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetUnbakedObjects(VirtualGrasp.VG_ReturnCode)">
            <summary>
            Return all unbaked objects.
            </summary>
            <returns>A list of all unbaked objects in the scene as Unity Transforms.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetExternalGrabStrength(System.Int32,VirtualGrasp.VG_HandSide,System.Single)">
            <summary>
            Send an external controller grab signal to the plugin (for EXTERNAL_CONTROLLER sensors).
            </summary>
            <param name="avatarID">The avatar to set external sensor pose for.</param>
            <param name="handSide">The hand side to set external sensor pose for.</param>
            <param name="strength">The grab strength signal to set.</param>
            @tag VG_ExternalControllerManager
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetExternalControllers(VirtualGrasp.VG_ControllerProfile,System.Collections.Generic.Dictionary{UnityEngine.Transform,System.Collections.Generic.List{VirtualGrasp.VG_ExternalController}}@)">
            <summary>
            Get the registered external controllers of a certain type.
            </summary>
            <param name="profile">The controller profile of which kind to return controllers for.</param>
            <param name="wristControllers">The wristControllers mapped by wrist transform.</param>
            @tag VG_ExternalControllerManager
        </member>
        <member name="M:VirtualGrasp.VG_Controller.RegisterExternalControllers(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{VirtualGrasp.VG_ExternalController}})">
            <summary>
            Register the external controllers that should be processed in each frame.
            </summary>
            <param name="controllers">A dictionary of external controllers (map from wrist ID to VG_ExternalControllers in order of priority).</param>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsMissingSensorData(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Check if a hand has invalid sensor data.
            </summary>
            <param name="avatarID">The avatar to check for.</param>
            <param name="handSide">The hand side to check for.</param>
            <returns>True if sensor data is invalid, False otherwise.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetSensorActive(System.Int32,VirtualGrasp.VG_HandSide,System.Boolean,UnityEngine.Vector3)">
            <summary>
            Set the active state of the sensor(s) that control the specified hand of an instance avatar.
            </summary>
            <param name="avatarID">The avatar id.</param>
            <param name="handSide">The side of the hand (remark: UNKNOWN will not have any effect).</param>
            <param name="active">If the sensor(s) that control this hand should be active or not.</param>
            <param name="resetPos">If a hand is deactivated, its position will be reset to here (default (0,0,0)).</param>
            @remark By default sensors are all active, and this function can be used in runtime to change this.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetAvatarActive(System.Int32,System.Boolean,System.Boolean,UnityEngine.Vector3)">
            <summary>
            Set the active state of the avatar sensor(s) and mesh.
            </summary>
            <param name="avatarID">The avatar id.</param>
            <param name="enableSensors">If the sensor(s) that control this hand should be active or not.</param>
            <param name="enableMesh">If the mesh of this hand should be visible or not.</param>
            <param name="resetPos">If an avatar is deactivated, hand positions will be reset to here (default (0,0,0)).</param>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetFingerCalibrationMode(System.Int32,System.Boolean)">
            <summary>
            Enable or disable finger calibration mode (FCM).
            </summary>
            During enabled FCM, the hand opening range will be calibrated.
            After disabling it, grasp and release signals will work in this range.
            <param name="avatarID">The avatar for which to enable/disable FCM.</param>
            <param name="enabled">True for enabling FCM, False for disabling it.</param>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetCalibrationMode(System.Int32,System.Boolean)">
            <summary>
            Enable or disable wrist calibration mode (WCM).
            During enabled WCM, different ranges of motion of the wrist or grab strength will be calibrated.
            </summary>
            @remark untested
            <param name="avatarID">The avatar for which to enable/disable WCM.</param>
            <param name="enabled">True for enabling WCM, False for disabling it.</param>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGrabStrength(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Returns the current grab strength of a hand.
            The grab strength is 0 for a fully open hand, 1 for a fully closed hand.
            </summary>
            <param name="avatarID">The avatar to receive the grab strength for.</param>
            <param name="handSide">The hand side to receive the grab strength for.</param>
            <returns>The current grab strength of the [side] hand.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGrabStrength(System.Int32)">
            <summary>
            Returns the current grab strength of a hand.
            The grab strength is 0 for a fully open hand, 1 for a fully closed hand.
            </summary>
            <param name="wristID">The id of wrist corresponding to the hand to receive the grab strength for.</param>
            <returns>The current grab strength of the [side] hand.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGrabVelocity(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Returns the current grab velocity of a hand.
            The current velocity of the grab strength (see GetGrabStrength),
            so negative when the hand is opening, and positive when the hand is closing.
            </summary>
            <param name="avatarID">The avatar to receive the grab velocity for.</param>
            <param name="handSide">The hand side to receive the grab velocity for.</param>
            <returns>The current grab velocity of the [side] hand.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetSensorOffset(System.Int32,VirtualGrasp.VG_SensorType,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3})">
            <summary>
            Change the sensor offset in runtime.
            The sensor offset is the offset between the pose that the current sensor is measuring
            and where the virtual hand is appearing in the scene.
            </summary>
            @remark Also treating left hand (LHS) and right hand (RHS) is considered, so the offset is applied symmetrically.
            <param name="avatarID">The avatar to set the offset for.</param>
            <param name="sensor">The sensor type to change the offset for.</param>
            <param name="position">The offset position. Set to null if position should not be modified.</param>
            <param name="rotation">The offset rotation. Set to null if rotation should not be modified.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetPushCircle(System.Int32,VirtualGrasp.VG_HandSide,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Single@,System.Boolean@)">
            <summary>
            Get the push circle for this hand side of an avatar as a visual hint for object selection for push without physics.
            </summary>
            <param name="avatarID">The avatar to get the push circle for.</param>
            <param name="handSide">The hand to get the push circle for.</param>
            <param name="p">The push circle's position.</param>
            <param name="r">The push circle's rotation (z-axis is normal).</param>
            <param name="radius">Radius of the push circle,</param>
            <param name="inContact">True if contact (i.e. pushing), False otherwise.</param>
            <returns>The selected object's Unity Transform, or null if none.</returns>
            @tag VG_HintVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetReplayAvatarID(System.Int32@)">
            <summary>
            Get the AvatarID of the replay avatar when the avatar represents both left and right hands.
            </summary>
            <param name="avatarID">The returned AvatarID. Will be set to -1 upon error.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark No guarantee on returning the one that was first registered as replay avatar
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetReplayAvatarID(System.Int32@,System.Int32@)">
            <summary>
            Get the AvatarID(s) of the replay avatar(s) when each avatar represents both hand sides or just one hand side. If the avatar represents both hand
            sides then avatarIDLeft and avatarIDRight are identical.
            </summary>
            <param name="avatarIDLeft">The ID of replay avatar that include left hand. Will be set to -1 upon error or if there is no replay avatar representing left hand.</param>
            <param name="avatarIDRight">The ID of replay avatar that include right hand. Will be set to -1 upon error or if there is no replay avatar representing right hand.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.StartRecording">
            <summary>
            Start recording sensor data.
            </summary>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.StopRecording">
            <summary>
            Stop recording sensor data.
            </summary>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SaveRecording(System.String)">
            <summary>
            Save recording sensor data and store the whole sequence to a file
            </summary>
            <param name="fullPath">The full path of the filename to save the recording to.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.CollectRecording(VirtualGrasp.VG_Recording@)">
            <summary>
            Collect recording sensor data.
            </summary>
            <param name="recording">[output] vg sensor recording.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.CollectRecording(System.Byte[]@)">
            <summary>
            Collect recording sensor data.
            </summary>
            <param name="recording">[output] byte array containing the sensor recording.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.LoadRecording(System.String)">
            <summary>
            Load recorded sensor data from a file, but do not start replay
            </summary>
            <param name="fullPath">The full path to load the recording from.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.LoadRecording(VirtualGrasp.VG_Recording)">
            <summary>
            Load recorded sensor data from a byte array.
            </summary>
            <param name="recording">The byte array to load the recording from.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetReplayStartWristPose(System.Int32,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Get the starting wrist poses for full replay of the whole interaction sequence.
            </summary>
            <param name="avatarID">The ID of the avatar to play the recording on (note: it has to be an avatar enabled for replay).</param>
            <param name="selectedObject">If provided, the entire sensor recording will transformed in to object's frame. If not, in global frame.</param>
            <param name="p_left">The position of the left wrist.</param>
            <param name="q_left">The orientation of the left wrist.</param>
            <param name="p_right">The position of the right wrist.</param>
            <param name="q_right">The orientation of the right wrist.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @remark LoadRecording need to be called before this to load recorded sensor data.
            @remark SetProcessByRecordedFrame need to be called before this to set this avatar to be enabled for replay.
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.StartReplay(System.Int32,UnityEngine.Transform)">
            <summary>
            Start full replay of the whole interaction sequence on an avatar.
            </summary>
            <param name="avatarID">The ID of the avatar to play the recording on (note: it has to be an avatar enabled for replay).</param>
            <param name="selectedObject">If provided, the entire sensor recording will be replayed in this object's frame. If not, in global frame.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ResumeReplay(System.Int32)">
            <summary>
            Resume replaying of an avatar.
            </summary>
            <param name="avatarID">The ID of the avatar to resume replaying the recording on (note: it has to be an avatar enabled for replay).</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.StopReplay(System.Int32)">
            <summary>
            Stop replay of the recorded interaction sequence on an avatar.
            </summary>
            <param name="avatarID">The ID of the avatar to play the recording on (note: it has to be an avatar enabled for replay).</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.StartReplayOnObject(UnityEngine.Transform,System.Int32,VirtualGrasp.VG_HandSide,System.Int32)">
            <summary>
            Start replaying a specific interaction segment on one object.
            </summary>
            <param name="obj">The object to play the interaction on.</param>
            <param name="avatarID">The avatar to play the interaction with.</param>
            <param name="handSide">The hand to play the interaction with.</param>
            <param name="interactionId">The ID of the interaction segment to be played on this object.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsReplaying(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Check if a hand is currently replaying a recorded sensor data.
            </summary>
            <param name="avatarID">The avatar to check.</param>
            <param name="handSide">The hand to check.</param>
            <returns>True if replaying, False otherwise.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsReplaying(System.Int32)">
            <summary>
            Check if avatar is currently replaying a recorded sensor data.
            </summary>
            <param name="avatarID">The avatar to check.</param>
            <returns>True if replaying, False otherwise.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.IsReplaySuccess">
            <summary>
            Check if finished replay had identical response as recorded
            </summary>
            <returns>True if replay was identical, False otherwise.</returns>
            @tag VG_Recorder 
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ForceReleaseObject(System.Int32)">
            <summary>
            Force the release of a grasp.
            </summary>
            <param name="avatarID">The avatar to release grasps on all its hands.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ForceReleaseObject(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Force the release of a grasp.
            </summary>
            <param name="avatarID">The avatar to release a grasp for.</param>
            <param name="side">The hand which to release the grasp for.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ForceReleaseObject(UnityEngine.Transform)">
            <summary>
            Force the release of the selected object by all grasping hands.
            </summary>
            <param name="selectedObject">The object to be released.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.MakeGesture(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_GestureType)">
            <summary>
            Make a gesture with a hand.
            </summary>
            <param name="avatarID">The avatar to make gesture for.</param>
            <param name="side">The hand which to make gesture for.</param>
            <param name="gesture">The gesture to make with the [side] hand of avatar [avatarID].</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.ReleaseGesture(System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Release a gesture on a hand.
            </summary>
            <param name="avatarID">The avatar to release a grasp for.</param>
            <param name="side">The hand which to release the grasp for.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetCurrentGesture(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_GestureType@)">
            <summary>
            Query what is the gesture a hand is forming, holding or releasing at the moment.
            </summary>
            <param name="avatarID">The avatar to query gesture status for.</param>
            <param name="side">The hand on which to query gesture status.</param>
            <param name="gesture">Output, the current gesture type the hand is in.</param>
            @remark If gesture output is UNKNOWN_GESTURETYPE, that means the hand is not forming, holding or releasing any gesture, but at a complete gesture-empty state.
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetBlockReleaseObject(System.Int32,System.Boolean)">
            <summary>
            Specify if on all hands of this avatar should block releasing the interaction (grasp or push) with an object or not in runtime.
            </summary>
            <param name="avatarID">The avatar to block release for.</param>
            <param name="block">If block release signal or not on this avatar.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetBlockReleaseObject(System.Int32,VirtualGrasp.VG_HandSide,System.Boolean)">
            <summary>
            Specify if on this hand should block releasing the interaction (grasp or push) with an object or not in runtime.
            </summary>
            <param name="avatarID">The avatar to block release for.</param>
            <param name="side">The hand of the avatar to block release for.</param>
            <param name="block">If block release signal or not on this hand.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetGlobalInteractionType(VirtualGrasp.VG_InteractionType)">
            <summary>
            Set the global interaction type method.
            The interaction type defines how the hand and the object should get together during a grasp.
            </summary>
            @remark This will overwrite the specific grasp interaction type (see SetInteractionTypeForObject) for all objects.
            <param name="interactionType">The method to switch to for all objects.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetInteractionTypeForSelectedObject(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_InteractionType)">
            <summary>
            Set the interaction type for a selected object.
            The interaction type defines how the hand and the object should get together during a grasp.
            </summary>
            @remark This will overwrite the global interaction type (see SetGlobalInteractionType) for that object.
            <param name="avatarID">The avatar which is selecting an object.</param>
            <param name="side">The hand which is selecting an object.</param>
            <param name="interactionType">The interaction type to switch to for the object that is selected by the [side] hand of avatar [avatarID].</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetInteractionTypeForObject(UnityEngine.Transform,VirtualGrasp.VG_InteractionType)">
            <summary>
            Set the interaction type for a selected object.
            The interaction type defines how the hand and the object should get together during a grasp.
            </summary>
            @remark This will overwrite the global interaction type (see SetGlobalInteractionType) for that object.
            <param name="selectedObject">The object to modify the interaction type for.</param>
            <param name="interactionType">The interaction type to switch to for the object.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetGlobalThrowVelocityScale(System.Single)">
            <summary>
            Set the global throw velocity scale.
            The throw velocity scale defines how powerful the throw is in terms of linear movement.
            </summary>
            @remark This will overwrite the specific throw velocity scale (see SetThrowVelocityScaleForObject) for all objects.
            <param name="throwVelocityScale">The throw translational velocity scale.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetThrowVelocityScaleForSelectedObject(System.Int32,VirtualGrasp.VG_HandSide,System.Single)">
            <summary>
            Set the throw velocity scale for a selected object.
            The throw velocity scale defines how powerful the throw is in terms of linear movement.
            </summary>
            @remark This will overwrite the global throw velocity scale (see SetGlobalThrowVelocityScale) for that object.
            <param name="avatarID">The avatar which is selecting an object.</param>
            <param name="side">The hand which is selecting an object.</param>
            <param name="throwVelocityScale">The throw translational velocity scale.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetThrowVelocityScaleForObject(UnityEngine.Transform,System.Single)">
            <summary>
            Set the throw velocity scale for a selected object.
            The throw velocity scale defines how powerful the throw is in terms of linear movement.
            </summary>
            @remark This will overwrite the global throw velocity scale (see SetGlobalThrowVelocityScale) for that object.
            <param name="selectedObject">The object to modify the throw velocity scale for.</param>
            <param name="throwVelocityScale">The throw translational velocity scale.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetGlobalThrowAngularVelocityScale(System.Single)">
            <summary>
            Set the global throw angular velocity scale.
            The throw angular velocity scale defines how powerful the throw is in terms of rotation movement.
            </summary>
            @remark This will overwrite the specific throw angular velocity scale (see SetThrowAngularVelocityScaleForObject) for all objects.
            <param name="throwAngularVelocityScale">The throw angular velocity scale.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetThrowAngularVelocityScaleForSelectedObject(System.Int32,VirtualGrasp.VG_HandSide,System.Single)">
            <summary>
            Set the throw angular velocity scale for a selected object.
            The throw angular velocity scale defines how powerful the throw is in terms of rotation movement.
            </summary>
            @remark This will overwrite the global throw angular velocity scale (see SetGlobalThrowAngularVelocityScale) for that object.
            <param name="avatarID">The avatar which is selecting an object.</param>
            <param name="side">The hand which is selecting an object.</param>
            <param name="throwAngularVelocityScale">The throw angular velocity scale.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetThrowAngularVelocityScaleForObject(UnityEngine.Transform,System.Single)">
            <summary>
            Set the throw angular velocity scale for a selected object.
            The throw angular velocity scale defines how powerful the throw is in terms of rotation movement.
            </summary>
            @remark This will overwrite the global throw angular velocity scale (see SetGlobalThrowAngularVelocityScale) for that object.
            <param name="selectedObject">The object to modify the throw velocity scale for.</param>
            <param name="throwAngularVelocityScale">The throw angular velocity scale.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetObjectAffordances(UnityEngine.Transform,VirtualGrasp.VG_Affordances)">
            <summary>
            Set the affordances for a selected object.
            </summary>
            <param name="selectedObject">The object to modify the affordances for.</param>
            <param name="affordances">The affordances to switch to for this object.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetBone(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_BoneType,UnityEngine.Transform@)">
            <summary>
            Return the pose (i.e. position and orientation) of a specific bone.
            </summary>
            <param name="avatarID">The avatar to get the bone pose from.</param>
            <param name="handSide">The hand side to get the bone pose from.</param>
            <param name="boneType">The BoneType to get.</param>
            <param name="t">The returned pose of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetBone(System.Int32)">
            <summary>
            Return the Transform that corresponds to a provided instance ID.
            </summary>
            <param name="transformID">The instance ID.</param>
            <returns>The Transform that corresponds to the transformID.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetBone(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_BoneType,System.Int32@,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Return the pose (i.e. position and orientation) of a specific bone.
            </summary>
            <param name="avatarID">The avatar to get the bone pose from.</param>
            <param name="handSide">The hand side to get the bone pose from.</param>
            <param name="boneType">The BoneType to get.</param>
            <param name="instanceID">The returned ID of the bone transform.</param>
            <param name="p">The returned position of the bone.</param>
            <param name="q">The returned rotation of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetBone(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_BoneType,System.Int32@,UnityEngine.Matrix4x4@)">
            <summary>
            Return the pose matrix of a specific bone.
            </summary>
            <param name="avatarID">The avatar to get the bone pose from.</param>
            <param name="handSide">The hand side to get the bone pose from.</param>
            <param name="boneType">The BoneType to get.</param>
            <param name="instanceID">The returned ID of the bone transform.</param>
            <param name="m">The returned pose matrix of the bone.</param>
            <returns>The Unity Transform that corresponds to the requested bone.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFingerBone(System.Int32,VirtualGrasp.VG_HandSide,System.Int32,System.Int32,System.Int32@,UnityEngine.Matrix4x4@)">
            <summary>
            Return the pose of a specific finger bone as a matrix.
            </summary>
            <param name="avatarID">The avatar to get the bone pose from.</param>
            <param name="handSide">The hand side to get the bone pose from.</param>
            <param name="fingerID">The finger to get the bone pose from (from 0 as thumb to 4 as pinky).</param>
            <param name="boneID">The bone index (from 0 as proximal to N as distal) to get the bone pose from. Use -1 for fingertip.</param>
            <param name="instanceID">The returned ID of the bone transform.</param>
            <param name="m">The returned pose of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFingerBone(UnityEngine.Transform,System.Int32,System.Int32,System.Int32@,UnityEngine.Matrix4x4@)">
            <summary>
            Return the pose of a specific finger bone as a matrix.
            </summary>
            <param name="wrist">The wrist transform of the hand to get bone pose from.</param>
            <param name="fingerID">The finger to get the bone pose from (from 0 as thumb to 4 as pinky).</param>
            <param name="boneID">The bone index (from 0 as proximal to N as distal) to get the bone pose from. Use -1 for fingertip.</param>
            <param name="instanceID">The returned ID of the bone transform.</param>
            <param name="m">The returned pose of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFingerBone(System.Int32,VirtualGrasp.VG_HandSide,System.Int32,System.Int32,System.Int32@,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Return the pose (i.e. position and orientation) of a specific finger bone.
            </summary>
            <param name="avatarID">The avatar to get the bone pose from.</param>
            <param name="handSide">The hand side to get the bone pose from.</param>
            <param name="fingerID">The finger to get the bone pose from (from 0 as thumb to 4 as pinky).</param>
            <param name="boneID">The bone index (from 0 as proximal to N as distal) to get the bone pose from. Use -1 for fingertip if there is original rig has no finger tip transform..</param>
            <param name="instanceID">The returned ID of the bone transform.</param>
            <param name="p">The returned position of the bone.</param>
            <param name="q">The returned rotation of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFingerBone(UnityEngine.Transform,System.Int32,System.Int32,System.Int32@,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Return the pose (i.e. position and orientation) of a specific finger bone.
            </summary>
            <param name="wrist">The wrist transform of the hand to get bone pose from.</param>
            <param name="fingerID">The finger to get the bone pose from (from 0 as thumb to 4 as pinky).</param>
            <param name="boneID">The bone index (from 0 as proximal to N as distal) to get the bone pose from. Use -1 for fingertip if there is original rig has no finger tip transform..</param>
            <param name="instanceID">The returned ID of the bone transform.</param>
            <param name="p">The returned position of the bone.</param>
            <param name="q">The returned rotation of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetFingerBone(System.Int32,VirtualGrasp.VG_HandSide,System.Int32,System.Int32,UnityEngine.Transform@)">
            <summary>
            Reflect the pose of a specific bone on a Transform.
            </summary>
            <param name="avatarID">The avatar to get the bone pose from.</param>
            <param name="handSide">The hand side to get the bone pose from.</param>
            <param name="fingerID">The finger to get the bone pose from (from 0 as thumb to 4 as pinky).</param>
            <param name="boneID">The bone index (from 0 as proximal to N as distal) to get the bone pose from. Use -1 for fingertip if there is original rig has no finger tip transform.</param>
            <param name="t">The returned pose of the bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetFingerBone(System.Int32,VirtualGrasp.VG_HandSide,System.Int32,System.Int32,UnityEngine.Transform,System.String)">
            <summary>
            Set a transform to a particular finger bone in the hand model.
            </summary>
            <param name="avatarID">The avatar to set finger transform to.</param>
            <param name="handSide">The hand side to set finger transform to.</param>
            <param name="fingerID">The finger to set finger transform to (from 0 as thumb to 4 as pinky).</param>
            <param name="boneID">The bone index (from 0 as proximal to N as distal) to set finger transform to.</param>
            <param name="t">The transform to set as a finger bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.SetBone(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_BoneType,UnityEngine.Transform)">
            <summary>
            Set a transform as a wrist or other bone type.
            </summary>
            <param name="avatarID">The avatar to set finger transform to.</param>
            <param name="handSide">The hand side to set finger transform to.</param>
            <param name="boneType">The BoneType to set wrist transform.</param>
            <param name="t">The transform to set as a finger bone.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetBoneIndex(System.Int32,UnityEngine.Transform,System.Int32@)">
            <summary>
            Get the index of a bone transform in an registered avatar.
            </summary>
            <param name="avatarID">The avatar to set finger transform to.</param>
            <param name="t">The transform to query index.</param>
            <param name="boneIdx">Output, the index of the bone transform in the registered avatar.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_HandProfile
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGrasp(System.UInt32,VirtualGrasp.VG_GraspDB@)">
            <summary>
            Get grasp information in raw byte format by objectHash.
            </summary>
            <param name="objectHash">Hash of the object for which to retrieve the grasp db.</param>
            <param name="grasp">GraspDB containing grasp information for object with hash objectHash.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <exception cref="T:System.ArgumentException">In case of unidentified objectHash.</exception>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGrasp(System.UInt32,System.Byte[]@)">
            <summary>
            Get grasp information in raw byte format by objectHash.
            </summary>
            <param name="objectHash">Hash of the object for which to retrieve the grasp db.</param>
            <param name="graspContent">Byte array with (encrypted) grasp information for object with hash objectHash.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <exception cref="T:System.ArgumentException">In case of unidentified objectHash.</exception>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.LoadGraspDB(VirtualGrasp.VG_GraspDB)">
            <summary>
            Loads grasp db.
            </summary>
            <param name="graspDB">grasp db to be loaded.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <exception cref="T:System.IO.IOException">In case of incorrect data format.</exception>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.LoadGrasp(System.Byte[])">
            <summary>
            Loads object-specific grasp db.
            </summary>
            <param name="grasp">Byte stream of object-specific grasp db.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <exception cref="T:System.IO.IOException">In case of incorrect data format.</exception>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.DeleteGrasp(System.UInt32)">
            <summary>
            Deletes object-specific grasp db. Won't delete grasp if there still exists one or more registered objects with objectHash.
            </summary>
            <param name="objectHash">Hash of the object to delete.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            <exception cref="T:System.ArgumentException">In case of unidentified objectHash.</exception>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.EditGrasp(System.Int32,VirtualGrasp.VG_HandSide,VirtualGrasp.VG_EditorAction,UnityEngine.Transform,System.Int32)">
            <summary>
            Call grasp editor functionality on a currently selected object and grasp.
            </summary>
            <param name="avatarID">The avatar to call grasp editor functionality on.</param>
            <param name="handSide">The hand side to call grasp editor functionality on.</param>
            <param name="action">The grasp editor function / action to call.</param>
            <param name="obj">The object to call the action on (if not provided, the object in the hand).</param>
            <param name="grasp">The grasp ID to call the action on (if not provided, the current grasp of the hand).</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag movie:https://youtu.be/40kYLBKhmqk?list=TLGGpdQGi0diO7gxNjExMjAyMg
            @tag VG_GraspStudio
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetInteractionTypeForObject(UnityEngine.Transform)">
            <summary>
            Get the current interaction type assigned to an object.
            </summary>
            <param name="selectedObject">The object to receive the interaction type for.</param>
            <returns>VG_InteractionType describing the current interaction type of the object.</returns>
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetGrasp(UnityEngine.Transform,System.Int32,VirtualGrasp.VG_HandSide,System.Int32,System.Int32@,UnityEngine.Vector3@,UnityEngine.Quaternion@,VirtualGrasp.VG_GraspType@,VirtualGrasp.VG_GraspLabel@,VirtualGrasp.VG_QueryGraspMode,VirtualGrasp.VG_QueryGraspMethod)">
            <summary>
            Receive a grasp in the grasp DB by index.
            </summary>
            <param name="selectedObject">The object to receive a grasp for.</param>
            <param name="avatarID">The avatar to receive a grasp for.</param>
            <param name="handSide">The hand side to receive a grasp for.</param>
            <param name="graspIndex">The index of grasp to receive.</param>
            <param name="p">The received wrist position of the grasp.</param>
            <param name="q">The received wrist orientation of the grasp.</param>
            <param name="type">The received VG_GraspType of the grasp.</param>
            <param name="label">The received VG_GraspLabel of the grasp.</param>
            <param name="queryGraspMode">Can be used to define if and how the grasp should be applied also.</param>
            <param name="queryGraspMethod">Can be used to define how the graspIndex should be interpreted.</param>
            <returns>VG_ReturnCode describing the error state of the function call.</returns>
            @tag VG_GraspStudio
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetNumGraspsInDB(UnityEngine.Transform,System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Receive the number of saved grasps in the grasp db for a specific object, and optionally a specified hand.
            </summary>
            <param name="selectedObject">The object to get the number of available grasps for.</param>
            <param name="avatarID">If a valid avatarID together with handSide, receive only the available grasps for this hand (otherwise all available grasps).</param>
            <param name="handSide">If a valid handSide together with avatarID, receive only the available grasps for this hand (otherwise all available grasps).</param>
            <returns>The number of saved grasps in the grasp db for the selected object (either all or for the specified hand).</returns>
            @tag VG_HintVisualizer
        </member>
        <member name="M:VirtualGrasp.VG_Controller.GetNumPrimaryGraspsInDB(UnityEngine.Transform,System.Int32,VirtualGrasp.VG_HandSide)">
            <summary>
            Receive the number of primary grasps in the grasp db for a specific object, and optionally a specified hand.
            </summary>
            <param name="selectedObject">The object to get the number of available grasps for.</param>
            <param name="avatarID">If a valid avatarID together with handSide, receive only the primary grasps for this hand (otherwise all available grasps).</param>
            <param name="handSide">If a valid handSide together with avatarID, receive only the primary grasps for this hand (otherwise all available grasps).</param>
            <returns>The number of primary grasps in the grasp db for the selected object (either all or for the specified hand).</returns>
            @tag VG_HintVisualizer
        </member>
        <member name="T:VirtualGrasp.VG_VelocityTracker">
            VG_VelocityTracker tracks object velocity when held by a hand.
        </member>
    </members>
</doc>
